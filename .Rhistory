library(readr)
m2 <- read_csv("C:/Users/edwardhung/Desktop/m2.csv")
View(m2)
printf <- function(...) invisible(print(sprintf(...)))
library(neuralnet)
printf <- function(...) invisible(print(sprintf(...)))
optFunc <- function(x) {
newData$accLight[1] <- x[1]
newData$accMotor[1] <- x[2]
return(predict(nn, newData)) #return生長情況
} #========#
dat <- read.csv("m2.csv")
avgDat <- dat[1,]
for (cname in names(dat)) {
avgDat[1,cname] <- mean(dat[,cname])
}
nn  <- neuralnet(cam ~ accLight + accMotor, dat, hidden = c(3, 2), linear.output = FALSE)
newData <- avgDat
res <- optim(par=c(avgDat$accLight, avgDat$accMotor), fn=optFunc, method = "SANN")
dat <- read.csv("m2.csv")
dat <- read.csv("m2.csv")
dat <- read.csv("m2.csv")
dat <- read_csv("C:/Users/edwardhung/Desktop/m2.csv")
avgDat <- dat[1,]
for (cname in names(dat)) {
avgDat[1,cname] <- mean(dat[,cname])
}
nn  <- neuralnet(cam ~ accLight + accMotor, dat, hidden = c(3, 2), linear.output = FALSE)
newData <- avgDat
res <- optim(par=c(avgDat$accLight, avgDat$accMotor), fn=optFunc, method = "SANN")
printf("fun(%.4f,%.4f) = %.4f", res$par[1], res$par[2], res$value)
res <- optim(par=c(avgDat$accLight, avgDat$accMotor), fn=optFunc, method = "SANN")
library(optimization)
res <- optim(par=c(avgDat$accLight, avgDat$accMotor), fn=optFunc, method = "SANN")
View(optFunc)
library(optim)
?optim
res <- optim(par=c(avgDat$accLight, avgDat$accMotor), fn=optFunc, method = "SANN")
install.packages("optim.functions")
library(optim)
library(optim.functions)
res <- optim(par=c(avgDat$accLight, avgDat$accMotor), fn=optFunc, method = "SANN")
res <- optim(par=c(avgDat$accLight, avgDat$accMotor), fn=optFunc, method = "SANN")
library(neuralnet)
printf <- function(...) invisible(print(sprintf(...)))
optFunc <- function(x) {
newData$accLight[1] <- x[1]
newData$accMotor[1] <- x[2]
return(predict(nn, newData)) #return生長情況
} #========#
dat <- read_csv("C:/Users/edwardhung/Desktop/m2.csv")
avgDat <- dat[1,]
for (cname in names(dat)) {
avgDat[1,cname] <- mean(dat[,cname])
}
library(optim.functions)
nn  <- neuralnet(cam ~ accLight + accMotor, dat, hidden = c(3, 2), linear.output = FALSE)
newData <- avgDat
res <- optim(par=c(avgDat$accLight, avgDat$accMotor), fn=optFunc, method = "SANN")
printf("fun(%.4f,%.4f) = %.4f", res$par[1], res$par[2], res$value)
View(avgDat)
View(m2)
View(avgDat)
avgDat <- dat[1,]
View(avgDat)
for (cname in names(dat)) {
avgDat[1,cname] <- mean(dat[,cname])
}
View(avgDat)
avgDat <- dat[1,]
for (cname in names(dat)) {
avgDat[,cname] <- mean(dat[,cname])
}
names(dat)
library(neuralnet)
printf <- function(...) invisible(print(sprintf(...)))
optFunc <- function(x) {
newData$accLight[1] <- x[1]
newData$accMotor[1] <- x[2]
return(predict(nn, newData))
} #========#
dat <- read.csv("m2.csv")
dat <- read.csv("C:/Users/edwardhung/Desktop/m2.csv")
avgDat <- dat[1,]
for (cname in names(dat)) {
avgDat[1,cname] <- mean(dat[,cname])
}
View(dat)
nn  <- neuralnet(cam ~ accLight + accMotor, dat, hidden = c(3, 2), linear.output = FALSE)
newData <- avgDat
res <- optim(par=c(avgDat$accLight, avgDat$accMotor), fn=optFunc, method = "SANN")
printf("fun(%.4f,%.4f) = %.4f", res$par[1], res$par[2], res$value)
#printf("fun(%.4f,%.4f) = %.4f", res$par[1], res$par[2], res$value)
printf(res$par[1], res$par[2], res$value)
#printf("fun(%.4f,%.4f) = %.4f", res$par[1], res$par[2], res$value)
printf(res$par[1], res$par[2], res$value)
#printf("fun(%.4f,%.4f) = %.4f", res$par[1], res$par[2], res$value)
print(res$par[1], res$par[2], res$value)
#printf("fun(%.4f,%.4f) = %.4f", res$par[1], res$par[2], res$value)
print(res$par[1] +"  "+res$par[2]+"  "+res$value)
#printf("fun(%.4f,%.4f) = %.4f", res$par[1], res$par[2], res$value)
print(res$par[1] ,"  ",res$par[2],"  ",res$value)
printf(hello world)
printf("hello world")
print("hello world")
print("hello world"+"ff")
print("hello world","ff")
print("hello world""ff")
print("hello world"..."ff")
print("hello world" "ff")
print(c("hello world","ff"))
print(c(hello world,ff))
avgDat <- dat[1,]
for (cname in names(dat)) {
avgDat[1,cname] <- mean(dat[,cname])
}
View(avgDat)
dat <- read_csv("C:/Users/edwardhung/Desktop/m2.csv")
#====data loading
library(neuralnet)
dat[1,]
for (cname in names(dat)) {
avgDat[1,cname] <- mean(dat[,cname])
}
avgDat<- dat[1,]
for (cname in names(dat)) {
avgDat[1,cname] <- mean(dat[,cname])
}
mean(c(10,16))
avgDat <- dat[1,]
for (cname in names(dat)) {
avgDat[1,cname] <- mean(dat[,cname])
}
library(neuralnet)
#printf <- function(...) invisible(print(sprintf(...)))
optFunc <- function(x) {
newData$accLight[1] <- x[1]
newData$accMotor[1] <- x[2]
return(predict(nn, newData))
} #========#
dat <- read.csv("C:/Users/edwardhung/Desktop/m2.csv")
avgDat <- dat[1,]
for (cname in names(dat)) {
avgDat[1,cname] <- mean(dat[,cname])
}
library(readr)
dat <- read_csv("C:/Users/edwardhung/Desktop/m2.csv")
#====data loading
library(neuralnet)
avgDat<- dat[1,]
for (cname in names(dat)) {
avgDat[1,cname] <- mean(dat[,cname])
}
dat <- read.csv("C:/Users/edwardhung/Desktop/m2.csv")
#====data loading
library(neuralnet)
avgDat<- dat[1,]
for (cname in names(dat)) {
avgDat[1,cname] <- mean(dat[,cname])
}
library(readr)
dat <- read.csv("C:/Users/edwardhung/Desktop/m2.csv")
#====data loading
library(neuralnet)
avgDat<- dat[1,]
for (cname in names(dat)) {
avgDat[1,cname] <- mean(dat[,cname])
}
nn  <- neuralnet(cam ~., dat, hidden = c(3, 2), linear.output = FALSE)
#====build model
nn
newData<- avgDat
View(newData)
res <- optim(par=c(avgDat$accLight, avgDat$accMotor), fn=optFunc, method = "SANN")
optFunc <- function(x) {
newData$accLight[1] <- x[1]
newData$accMotor[1] <- x[2]
return(predict(nn, newData))
}
res <- optim(par=c(avgDat$accLight, avgDat$accMotor), fn=optFunc, method = "SANN")
#====optimization
res
printf <- function(...) invisible(print(sprintf(...)))
printf("fun(%.4f,%.4f) = %.4f", res$par[1], res$par[2], res$value)
print("fun(%.4f,%.4f)"res$par[1], res$par[2])
print("fun(%.4f,%.4f)"+res$par[1], res$par[2])
print("fun(%.4f,%.4f)",res$par[1], res$par[2])
print(c("fun()",res$par[1], res$par[2]))
print(c("fun(res$par[1])", res$par[2]))
print(c("fun(,res$par[1],)", res$par[2]))
print(c("fun(",res$par[1],res$par[2],") = ", res$value))
print(noquote(c("fun(",res$par[1],res$par[2],") = ", res$value)))
sprintf("fun(%.4f,%.4f) = %.4f",res$par[1],res$par[2],res$value)
library(readr)
dat <- read.csv("C:/Users/edwardhung/Desktop/m2.csv")
#====data loading
library(neuralnet)
nn  <- neuralnet(cam ~., dat, hidden = c(3, 2), linear.output = FALSE)
#====build model
avgDat<- dat[1,]
for (cname in names(dat)) {
avgDat[1,cname] <- mean(dat[,cname])
}
newData<- avgDat
optFunc <- function(x) {
newData$accLight[1] <- x[1]
newData$accMotor[1] <- x[2]
return(predict(nn, newData))#return生長情況
}
res <- optim(par=c(avgDat$accLight, avgDat$accMotor), fn=optFunc, method = "SANN")
#====optimization
res
sprintf("fun(%.4f,%.4f) = %.4f",res$par[1],res$par[2],res$value)
